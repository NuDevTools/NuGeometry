name: CMake Build Matrix

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  CMAKE_VERSION: 3.12
  BUILD_TYPE: Release
  CCACHE_VERSION: 4.4

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Ubuntu Latest GCC", artifact: "Linux.tar.bz2",
              os: ubuntu-latest, extension: "", prefix: "."
            }
          - {
              name: "Windows Latest", artifact: "Windows.tar.bz2",
              os: windows-latest, extension: ".exe", prefix: "Release"
            }
          - {
              name: "MacOS Latest", artifact: "MacOS.tar.bz2",
              os: macos-latest, extension: "", prefix: "."
            }

    steps:
      - uses: actions/checkout@v2
      
      - name: Set up cache 
        id: cache-cpm
        uses: actions/cache@v2
        with:
          path: ~/cpm-cache
          key: ${{ runner.os }}-cpm-${{ hashFiles('**/') }}
          restore-keys: |
            ${{ runner.os }}-cpm-

      - name: Download ccache 
        id: ccache 
        shell: cmake -P {0}
        run: |
          set(ccache_url "https://github.com/cristianadam/ccache/releases/download/v$ENV{CCACHE_VERSION}/${{ runner.os }}.tar.xz")
          file(DOWNLOAD "${ccache_url}" ./ccache.tar.xz SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ccache.tar.xz)

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
  
      - name: ccache cache files 
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ matrix.config.name }}-ccache-
  
      - name: Configure CMake
        # TODO: Add coverage only for Linux
        run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DENABLE_TESTING=ON -DCPM_SOURCE_CACHE=~/cpm-cache

      - name: Build 
        run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }} -j4

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ./test/${{ matrix.config.prefix }}/nugeometry-testsuite${{ matrix.config.extension }}
       
          # - name: Code coverage
          #   working-directory: ${{github.workspace}}
          #   run: |
          #     lcov --directory . --capture --output-file coverage.info
          #     lcov --remove coverage.info '/Library/*' '/usr/*' "${HOME}"'/.cache/*' '*/test/*' '*/external/*' '*/_deps/*' '*/lodepng/*' --output-file coverage.info
          #     lcov --list coverage.info
          #     bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
